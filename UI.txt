import java.io.*;
import java.util.Scanner;
import javax.swing.*;
import javax.swing.border.Border;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.*; 
import javax.swing.filechooser.*; 
class filechooser extends JFrame implements ActionListener { 
  
    // Jlabel to show the files user selects 
    static JLabel l; 
  
    // a default constructor 
    filechooser() 
    {
    	getContentPane().setLayout(null); 
    } 
  
    public static void main(String args[]) 
    { 
    	//FS2 a=new FS2();
    	//a.setVisible(true);
        // frame to contains GUI elements 
        JFrame f = new JFrame("file chooser"); 
        
  
  
        // set the size of the frame 
        f.setSize(50,50); 
        f.setBackground(Color.black);
  
        // set the frame's visibility 
        f.setVisible(true); 
  
        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); 
        l = new JLabel("no file selected"); 
        l = new JLabel("LZW Compression and Decompression",JLabel.CENTER);
        l.setVerticalAlignment(JLabel.TOP);
        l.setFont(new Font("Verdana", Font.BOLD, 15));
        
        
        // button to open save dialog 
        JButton button1 = new JButton("COMPRESSION"); 
        button1.setBounds(300, 300, 178, 45);
		button1.setFont(new Font("Tahoma", Font.PLAIN,20));
		button1.setForeground(Color.BLACK);
		button1.setBackground(Color.WHITE);
		button1.setAlignmentX(Component.LEFT_ALIGNMENT);
  
        // button to open open dialog 
        JButton button2 = new JButton("DECOMPRESSION"); 
        button2.setBounds(329, 97, 184, 45);
		button2.setFont(new Font("Tahoma", Font.PLAIN,20));
		button2.setForeground(Color.BLACK);
		button2.setBackground(Color.WHITE);
	
		
		 
  
        // make an object of the class filechooser 
        filechooser f1 = new filechooser(); 
  
        // add action listener to the button to capture user 
        // response on buttons 
        button1.addActionListener(f1); 
        button2.addActionListener(f1); 
  
        // make a panel to add the buttons and labels 
        JPanel p = new JPanel(); 
  
        // add buttons to the frame 
        p.add(button1); 
        p.add(button2); 
        p.setBackground(Color.gray);
  
        // set the label to its initial value 
       
        
        // add panel to the frame 
        p.add(l); 
        f.getContentPane().add(p); 
  
        f.show(); 
    } 
    public void actionPerformed(ActionEvent evt) 
    { 
        // if the user presses the save button show the save dialog 
        String com = evt.getActionCommand(); 
  
        if (com.equals("COMPRESSION")) { 
            // create an object of JFileChooser class 
            JFileChooser j = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory()); 
            j.setAcceptAllFileFilterUsed(false); 
            
            // set a title for the dialog 
            j.setDialogTitle("Select a .txt file"); 
  
            // only allow files of .txt extension 
            FileNameExtensionFilter restrict = new FileNameExtensionFilter("Only .txt files", "txt"); 
            j.addChoosableFileFilter(restrict);
  
            // invoke the showsSaveDialog function to show the save dialog 
            int r = j.showOpenDialog(null); 
  
            // if the user selects a file 
            if (r == JFileChooser.APPROVE_OPTION) 
  
            { 
                // set the label to the path of the selected file 
                l.setText(j.getSelectedFile().getAbsolutePath()); 
            } 
            // if the user cancelled the operation 
            else
                l.setText("the user cancelled the operation");
            try 
            { 
            comp lzw = new comp();

            
                
            

             File file = new File(j.getSelectedFile().getAbsolutePath());

             Scanner fileScanner = new Scanner(file);

             String line = "";
        
        
  
  int count=0;
  while(fileScanner.hasNext()){
      fileScanner.next();
      count++;
  }
  
  System.out.println("Number of words in the original file:"+count);
             while (fileScanner.hasNext()) {
                 line = fileScanner.nextLine();
                 }
             long starttime=System.nanoTime();
             lzw.compress(j.getSelectedFile().getAbsolutePath());
             long stoptime=System.nanoTime();
             long totaltime=(stoptime-starttime);
             l.setText(("\nCompression of your file is complete!\n")+("\nTotal time taken To Compress the File : "+totaltime/1000000000 + " seconds")+("\nYour new file path is: " + j.getSelectedFile().getAbsolutePath().concat(".lzw")));
           
     
         
       
    
         
         } catch (IOException e) {
             System.out.println("File was not found!");
         }
        } 
  
        // if the user presses the open dialog show the open dialog 
        else { 
            // create an object of JFileChooser class 
            JFileChooser j = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory()); 
            j.setAcceptAllFileFilterUsed(false); 
            
            // set a title for the dialog 
            j.setDialogTitle("Select a .lzw file"); 
  
            // only allow files of .txt extension 
            FileNameExtensionFilter restrict = new FileNameExtensionFilter("Only .lzw files", "lzw"); 
            j.addChoosableFileFilter(restrict);
            
  
            // invoke the showsOpenDialog function to show the save dialog 
            int r = j.showOpenDialog(null); 
  
            // if the user selects a file 
            if (r == JFileChooser.APPROVE_OPTION) 
  
            { 
                // set the label to the path of the selected file 
                l.setText(j.getSelectedFile().getAbsolutePath()); 
            } 
            // if the user cancelled the operation 
            else
                l.setText("the user cancelled the operation"); 
            try {
                decompression lzw = new decompression();

                

                
                
                

                File file = new File(j.getSelectedFile().getAbsolutePath());
                  
                Scanner fileScanner = new Scanner(file);

                String line = "";
                         
          
     
     
                while (fileScanner.hasNext()) {
                    line = fileScanner.nextLine();
                    System.out.println("Contents of your file being decompressed:\n"+ line);
                }
                 long originalfilesize = file.length();     
             FileInputStream fis = new FileInputStream(file);
          byte[] byteArray = new byte[(int)file.length()];
          fis.read(byteArray);
          String data = new String(byteArray);
          String[] stringArray = data.split("\r\n");
          long stime=System.nanoTime();
                lzw.LZW_Decompress(j.getSelectedFile().getAbsolutePath());
                 long sttime=System.nanoTime();
                long tttime=(sttime-stime);
                l.setText(("\nDecompression of your file is complete!")+("\nTotal time take to Decompress : "+tttime/1000000000 +" seconds")+("\nYour new file path is: "+ j.getSelectedFile().getAbsolutePath().replace(".lzw", "")));
                
              
                
                        } catch (IOException e) {
                System.out.println("File was not found!");
            }
        }
            
        }
        
        
    } 
